
import java.util.Scanner;

public class FindUnsafeBanksNew {
    final static int TRUE = 1;
    final static int FALSE = 0;
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);

        // Read the number of banks
        int n = input.nextInt();
        // Read safe limit
        int limit = input.nextInt();

        double[] balances = new double[n]; // Balance for each bank
        double[][] loan = new double[n][n]; // loan[i][j] is the amount bank i loans to bank j
        int i;
        //Initialisation of balances
        initBalances(balances, n);
        //Initialisation of loan array as 0 i.e. everything starts off as 0
        for (i = 0; i < n; i++) {
            loan[i][i] = 0;
            System.out.println("Balances is " + balances[i]);
        }
        //Inputting actual loans
        for (i = 0; i < n; i++) {
            switch(i) {
                case 0:
                if (n > 1) loan[0][1] = 100.5;
                if (n > 4) loan[0][4] = 320.5;
                break;
                case 1:
                if (n > 2) loan[1][2] = 40;
                if (n > 3) loan[1][3] = 85;
                break;
                case 2:
                loan[2][0] = 125;
                if (n > 3) loan[2][3] = 75;
                break;
                case 3:
                loan[3][0] = 125;
                break;
                case 4:
                loan[4][2] = 125;
                break;
            }
        }
        //Counting number of banks that owe money
        int j, k, l;
        int countBank = 0;
        //Array contains how many banks owe other bank in accordance with n
        int loanCount[][] = new int[n][2];
        for (k = 0; k < n; k++) {
            countBank = 0;
            for (j = 0; j < n; j++) {
                if (loan[k][j] != 0) {
                    countBank++;
                }
            }
            //2nd column contains count
            loanCount[k][1] = countBank;
        }
        //printing output
        for (i = 0; i < n; i++) {
            System.out.print(balances[i] + " " + loanCount[i][1] + " ");
            for (j = 0; j < n; j++) {
                if (loan[i][j] != 0) {
                    System.out.print(j + " " + loan[i][j] + " ");
                }
            }
            System.out.println();
        }
        //Value of each bank
        double value;
        int unsafeBank[][] = new int[n][2];
        int orderOfBanks[] = new int[n+1];
        int orderCounter = 0;
        //Initialise unsafe bank, i.e. have them 1 to indicate as safe
        //Initialise orderOfBanks for final printing
        for (i = 0; i < n; i++) {
            unsafeBank[i][1] = FALSE;
        }
        for (i = 0; i < n+1; i++) {
            orderOfBanks[i] = -1;
        }
        //Determining if unsafe bank
        for (i = 0; i < n; i++) {
            value = 0;
            for (j = 0; j < n; j++) {
                //Adding the loan amount of each bank
                value += loan[i][j];
            }
            //Condition for unsafe bank
            if ((balances[i] + value) < limit) {
                unsafeBank[i][1] = TRUE;
                orderOfBanks[orderCounter] = i;
                if (orderCounter < n) {
                    orderCounter++;
                }
                System.out.println("Order Counter is " + orderCounter);
            }
        }
        //Setting borrowers to 0 if bank becomes unsafe
        setUnsafe(unsafeBank, loan, n);
        //Loop for after bank becomes unsafe, affect on other banks
        //Determining if unsafe bank
        int flag = FALSE;
        for (i = 0; i < n; i++) {
            value = 0;
            for (j = 0; j < n; j++) {
                //Adding the loan amount of each bank
                value += loan[i][j];
            }
            //Condition for unsafe bank and printing
            if ((balances[i] + value) < limit) {
                unsafeBank[i][1] = TRUE;
                //Need to go through orderOfBanks so we do not double up
                for (k = 0; k < n; k++) {
                    flag = FALSE;
                    System.out.println("orderOfBanks is " + k + " i is " + i);
                    if (orderOfBanks[k] == i) {
                        flag = TRUE;
                    }
                    break;
                }
                if (flag == FALSE) {
                    orderOfBanks[orderCounter] = i;
                    if (orderCounter < n) {
                        orderCounter++;
                    }
                    System.out.println("Order Counter is " + orderCounter);
                }
            }
        }
        for (i = 0; i < n; i++) {
            System.out.println("Orderofbank is" + orderOfBanks[i]);
        }
        System.out.print("Unsafe banks are " );
        for (i = 0; i < n; i++) {
            if (orderOfBanks[i] != -1) {
                System.out.print(orderOfBanks[i] + " ");
            }
        }
        System.out.println();
    }
    //Initialises balance
    public static void initBalances(double[] bal, int input) {
        int i;
        for (i = 0; i < input; i++) {
            switch(i) {
                case 0: bal[i] = 25; break;
                case 1: bal[i] = 125; break;
                case 2: bal[i] = 175; break;
                case 3: bal[i] = 75; break;
                case 4: bal[i] = 181; break;
            }
        }
    }
    //Sets banks to unsafe
    public static void setUnsafe(int[][] unsafe, double[][] loan, int input) {
        int i, k;
        for (i = 0; i < input; i++) {
            if (unsafe[i][1] == TRUE) {
                for (k = 0; k < input; k ++) {
                    loan[k][i] = 0;
                }
            }
        }
    }
    public static boolean isElem(int[] array, int element) {
        int i = 0;
        for (i = 0; i < array.length; i++ ) {
            if (array[i] == element) {
                return true;
            }
            else {
                return false;
            }
        }
        return false;
    }
}
